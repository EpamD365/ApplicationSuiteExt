<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessEventsConfigurationTableAux_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.ApplicationPlatform.XppServices.Instrumentation;
using Microsoft.Dynamics.Ax.Xpp.Dataverse;
using Microsoft.Dynamics.Ax.Xpp.Dataverse.Contracts;

/// <summary>
/// BusinessEventsPublisher extension class
/// </summary>
[ExtensionOf(tableStr(BusinessEventsConfiguration))]
final class BusinessEventsConfigurationTableAux_Extension
{
}

]]></Declaration>
		<Methods>
			<Method>
				<Name>configureAndSyncAux</Name>
				<Source><![CDATA[
    public void configureAndSyncAux(str _endpointName)
    {
        int linesLeft = Global::infologLine();
        if (this.validateWrite())
        {
            try
            {
                this.insert();
                CdsProxyException cdsProxyException;
                try
                {
                    if (BusinessEventsFlights::IsBusinessEventsCDSIntegrationEnabled()
                        && !BusinessEventsCDSSyncHelperExt::skipCdsSync)
                    {
                        ComponentChangeRequest configChangeRequest = new ComponentChangeRequest();
                        configChangeRequest.ComponentChangeType = ComponentChangeType::Create;
                        configChangeRequest.ComponentType = FnoComponentType::Configuration;
                        configChangeRequest.ExternalId = int642Str(this.RecId);

                        BusinessEventsCDSSyncHelperExt::sendChangeRequest(configChangeRequest);
                    }
                }
                catch (cdsProxyException)
                {
                    //If we catch a CdsProxyException, then we need to rollback the insert operation.
                    using (var skipCdsSyncScope = new BusinessEventsSkipCdsSyncScope(true))
                    {
                        ttsbegin;
                        this.delete();
                        ttscommit;
                    }
                    throw;
                }

                BusinessEventsEventSource::EventWriteBusinessEventsActivated(this.BusinessEventsTable, this.LegalEntity, this.BusinessEventsEndpoint);
                if (this.LegalEntity != '')
                {
                    info(strFmt("@BusinessEvents:BusinessEventConfigurationSuccessful", this.BusinessEventsTable, this.LegalEntity));
                }
                else
                {
                    info(strFmt("@BusinessEvents:BusinessEventConfigurationSuccessfulAllCompanies", this.BusinessEventsTable));
                }
            }
            catch (Exception::DuplicateKeyException)
            {
                infolog.clear(linesLeft);

                if (this.LegalEntity != '')
                {
                    BusinessEventsEventSource::EventWriteBusinessEventsConfigurationWarning(strFmt("Unable to configure business event '%1' for company '%2' because it is already configured for endpoint '%3'.", this.BusinessEventsTable, this.LegalEntity, _endpointName));
                    warning(strFmt("@BusinessEvents:BusinessEventConfigurationFailed", this.BusinessEventsTable, this.LegalEntity, _endpointName));
                }
                else
                {
                    BusinessEventsEventSource::EventWriteBusinessEventsConfigurationWarning(strFmt("Unable to configure business event '%1' for all companies because it is already configured for endpoint '%3'.", this.BusinessEventsTable, _endpointName));
                    warning(strFmt("@BusinessEvents:BusinessEventConfigurationFailedAllCompanies", this.BusinessEventsTable, _endpointName));
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>